/**
 * X·ª≠ l√Ω ch·ª©c nƒÉng th√¥ng b√°o qua email khi c√≥ tin nh·∫Øn m·ªõi
 */
class EmailNotification {
    constructor() {
        this.emailServiceId = 'service_6jtozgf'; // Thay th·∫ø b·∫±ng service ID c·ªßa b·∫°n t·ª´ EmailJS
        this.emailTemplateId = '__ejs-test-mail-service__'; // Thay th·∫ø b·∫±ng template ID c·ªßa b·∫°n t·ª´ EmailJS
        this.emailUserId = '7xYUDg8Fs7oJ4LAWl'; // Thay th·∫ø b·∫±ng user ID c·ªßa b·∫°n t·ª´ EmailJS
        this.isEnabled = false;
        this.emailSettings = {};
        this.loadSettings();
    }

    /**
     * T·∫£i c√†i ƒë·∫∑t th√¥ng b√°o email t·ª´ localStorage
     */
    loadSettings() {
        const settings = localStorage.getItem('emailNotificationSettings');
        if (settings) {
            this.emailSettings = JSON.parse(settings);
            this.isEnabled = this.emailSettings.enabled || false;
        } else {
            // C√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh
            this.emailSettings = {
                enabled: false,
                email: '',
                notifyAllMessages: false,
                notifyMentions: true,
                notifyDirectMessages: true
            };
            this.saveSettings();
        }
    }

    /**
     * L∆∞u c√†i ƒë·∫∑t th√¥ng b√°o email v√†o localStorage
     */
    saveSettings() {
        localStorage.setItem('emailNotificationSettings', JSON.stringify(this.emailSettings));
    }

    /**
     * B·∫≠t/t·∫Øt th√¥ng b√°o email
     * @param {boolean} enabled - Tr·∫°ng th√°i b·∫≠t/t·∫Øt
     */
    setEnabled(enabled) {
        this.isEnabled = enabled;
        this.emailSettings.enabled = enabled;
        this.saveSettings();
    }

    /**
     * C·∫≠p nh·∫≠t email nh·∫≠n th√¥ng b√°o
     * @param {string} email - ƒê·ªãa ch·ªâ email
     */
    setEmail(email) {
        this.emailSettings.email = email;
        this.saveSettings();
    }

    /**
     * C·∫≠p nh·∫≠t c√†i ƒë·∫∑t lo·∫°i tin nh·∫Øn c·∫ßn th√¥ng b√°o
     * @param {Object} settings - C√†i ƒë·∫∑t th√¥ng b√°o
     */
    updateNotificationSettings(settings) {
        this.emailSettings = {...this.emailSettings, ...settings};
        this.saveSettings();
    }

    /**
     * Ki·ªÉm tra xem tin nh·∫Øn c√≥ c·∫ßn g·ª≠i th√¥ng b√°o kh√¥ng
     * @param {Object} message - Th√¥ng tin tin nh·∫Øn
     * @param {Object} chat - Th√¥ng tin cu·ªôc tr√≤ chuy·ªán
     * @param {Object} currentUser - Th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
     * @returns {boolean} - C√≥ c·∫ßn g·ª≠i th√¥ng b√°o kh√¥ng
     */
    shouldNotify(message, chat, currentUser) {
        if (!this.isEnabled || !this.emailSettings.email) {
            return false;
        }

        // Kh√¥ng th√¥ng b√°o tin nh·∫Øn c·ªßa ch√≠nh m√¨nh
        if (message.senderId === currentUser.uid) {
            return false;
        }

        // Th√¥ng b√°o t·∫•t c·∫£ tin nh·∫Øn
        if (this.emailSettings.notifyAllMessages) {
            return true;
        }

        // Th√¥ng b√°o tin nh·∫Øn tr·ª±c ti·∫øp
        if (this.emailSettings.notifyDirectMessages && chat.type === 'private') {
            return true;
        }

        // Th√¥ng b√°o khi ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn
        if (this.emailSettings.notifyMentions && 
            message.text && 
            message.text.includes(`@${currentUser.displayName}`)) {
            return true;
        }

        return false;
    }

    /**
     * G·ª≠i th√¥ng b√°o qua email
     * @param {Object} message - Th√¥ng tin tin nh·∫Øn
     * @param {Object} chat - Th√¥ng tin cu·ªôc tr√≤ chuy·ªán
     * @param {Object} sender - Th√¥ng tin ng∆∞·ªùi g·ª≠i
     */
    sendNotification(message, chat, sender) {
        const currentUser = authManager.getCurrentUser();
        
        if (!this.shouldNotify(message, chat, currentUser)) {
            return;
        }

        // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i email
        const templateParams = {
            to_email: this.emailSettings.email,
            to_name: currentUser.displayName,
            from_name: sender.displayName || 'Ng∆∞·ªùi d√πng',
            chat_name: chat.name,
            message_text: message.type === 'image' ? 'üñºÔ∏è ƒê√£ g·ª≠i m·ªôt h√¨nh ·∫£nh' : message.text,
            app_url: window.location.href
        };

        // G·ª≠i email s·ª≠ d·ª•ng EmailJS
        if (window.emailjs) {
            emailjs.send(this.emailServiceId, this.emailTemplateId, templateParams, this.emailUserId)
                .then(() => {
                    console.log('ƒê√£ g·ª≠i th√¥ng b√°o email th√†nh c√¥ng');
                })
                .catch(error => {
                    console.error('L·ªói khi g·ª≠i th√¥ng b√°o email:', error);
                });
        } else {
            console.error('EmailJS ch∆∞a ƒë∆∞·ª£c t·∫£i');
        }
    }

    /**
     * Hi·ªÉn th·ªã modal c√†i ƒë·∫∑t th√¥ng b√°o email
     */
    showSettingsModal() {
        // T·∫°o modal c√†i ƒë·∫∑t
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.id = 'email-notification-modal';

        const currentUser = authManager.getCurrentUser();
        const userEmail = currentUser ? currentUser.email : '';

        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>C√†i ƒë·∫∑t th√¥ng b√°o email</h3>
                    <button class="close-modal">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label class="switch">
                            <input type="checkbox" id="enable-email-notification" ${this.isEnabled ? 'checked' : ''}>
                            <span class="slider round"></span>
                        </label>
                        <label for="enable-email-notification">B·∫≠t th√¥ng b√°o qua email</label>
                    </div>
                    <div class="form-group">
                        <label for="notification-email">Email nh·∫≠n th√¥ng b√°o:</label>
                        <input type="email" id="notification-email" value="${this.emailSettings.email || userEmail}" placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email...">
                    </div>
                    <div class="form-group">
                        <h4>Nh·∫≠n th√¥ng b√°o khi:</h4>
                        <div class="checkbox-group">
                            <label>
                                <input type="checkbox" id="notify-all-messages" ${this.emailSettings.notifyAllMessages ? 'checked' : ''}>
                                C√≥ tin nh·∫Øn m·ªõi trong b·∫•t k·ª≥ cu·ªôc tr√≤ chuy·ªán n√†o
                            </label>
                        </div>
                        <div class="checkbox-group">
                            <label>
                                <input type="checkbox" id="notify-direct-messages" ${this.emailSettings.notifyDirectMessages ? 'checked' : ''}>
                                C√≥ tin nh·∫Øn tr·ª±c ti·∫øp m·ªõi
                            </label>
                        </div>
                        <div class="checkbox-group">
                            <label>
                                <input type="checkbox" id="notify-mentions" ${this.emailSettings.notifyMentions ? 'checked' : ''}>
                                ƒê∆∞·ª£c nh·∫Øc ƒë·∫øn trong tin nh·∫Øn (@${currentUser ? currentUser.displayName : 'b·∫°n'})
                            </label>
                        </div>
                    </div>
                    <div class="note">
                        <p><i class="fas fa-info-circle"></i> L∆∞u √Ω: B·∫°n c·∫ßn c√†i ƒë·∫∑t EmailJS ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="save-email-settings" class="primary-button">L∆∞u c√†i ƒë·∫∑t</button>
                </div>
            </div>
        `;

        // Th√™m modal v√†o body
        document.body.appendChild(modal);

        // Hi·ªÉn th·ªã modal
        setTimeout(() => {
            modal.classList.add('active');
        }, 10);

        // X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng modal
        const closeButton = modal.querySelector('.close-modal');
        closeButton.addEventListener('click', () => {
            modal.classList.remove('active');
            setTimeout(() => {
                modal.remove();
            }, 300);
        });

        // X·ª≠ l√Ω s·ª± ki·ªán l∆∞u c√†i ƒë·∫∑t
        const saveButton = document.getElementById('save-email-settings');
        saveButton.addEventListener('click', () => {
            const enabled = document.getElementById('enable-email-notification').checked;
            const email = document.getElementById('notification-email').value.trim();
            const notifyAllMessages = document.getElementById('notify-all-messages').checked;
            const notifyDirectMessages = document.getElementById('notify-direct-messages').checked;
            const notifyMentions = document.getElementById('notify-mentions').checked;

            // Ki·ªÉm tra email h·ª£p l·ªá
            if (enabled && !email) {
                ui.showToast('error', 'L·ªói', 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ email');
                return;
            }

            // C·∫≠p nh·∫≠t c√†i ƒë·∫∑t
            this.setEnabled(enabled);
            this.setEmail(email);
            this.updateNotificationSettings({
                notifyAllMessages,
                notifyDirectMessages,
                notifyMentions
            });

            // ƒê√≥ng modal
            modal.classList.remove('active');
            setTimeout(() => {
                modal.remove();
            }, 300);

            // Hi·ªÉn th·ªã th√¥ng b√°o
            ui.showToast('success', 'Th√†nh c√¥ng', 'ƒê√£ l∆∞u c√†i ƒë·∫∑t th√¥ng b√°o email');
        });
    }
}

// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng EmailNotification
const emailNotification = new EmailNotification();